#!/usr/bin/env perl

use strict;
use warnings "all";
use Deep::Hash::Utils;
use File::Basename;
use File::Spec::Functions 'catfile';
use Getopt::Long;
use XML::Simple;

# Constants {{{1
################################################################

my $SCRIPTNAME = basename($0);
my $SCRIPTPATH = dirname($0);

# Variables {{{1
################################################################

my $INPUT_FOLDER = '.';
my $HELP = 0;

# Print help {{{1
################################################################

sub print_help {
	print "Usage: $SCRIPTNAME [options]

This program will scan the configuration files for tools, and check
that they are correctly defined.

Options:
   -h, --help           Print this help message and exits.
   -i,--input <FOLDER>  Set the input folder to use. Default is '.'.
"
}

# Read args {{{1
################################################################

sub read_args {

	GetOptions('help|h' => \$HELP, 'input|i' => \$INPUT_FOLDER) or print_help();

	print_help() if $HELP;

	if (@ARGV > 0) {
		print "No arguments allowed.\n";
		print_help();
	}
}

# Get tool XML files {{{1
################################################################

sub get_tool_xml_files {

	my $tool_conf_file = catfile($INPUT_FOLDER, 'config', 'tool_conf.xml');
	die "No file \"$tool_conf_file\"." unless -f $tool_conf_file;

	# Read tool_conf.xml and get all XML tool paths.
	my @tool_xml_files;
	my $xml_parser = new XML::Simple;
	my $tools = $xml_parser->XMLin($tool_conf_file);
	while (my @keys = Deep::Hash::Utils::reach($tools)) {
		push(@tool_xml_files, $keys[-1]) if ($keys[-2] eq 'file');
	}

	# Filter out non-PhenoMeNal tools
	@tool_xml_files = grep(/^phenomenal\//, @tool_xml_files);

	return @tool_xml_files;
}

# Get tools info {{{1
################################################################

sub get_tools_info {

	my @tool_xml_files = get_tool_xml_files();
	my %tools;

	my $xml_parser = new XML::Simple();
	for my $xml_file (@tool_xml_files) {
		my $xml_file_path = catfile($INPUT_FOLDER, 'tools', $xml_file);
		my $tool = $xml_parser->XMLin($xml_file_path);
		my $tool_id = $$tool{id};
		my $tool_name = $$tool{name};
		my $tool_version = $$tool{version};
		my $tool_command = $$tool{command};
		$tools{$tool_id} = { name => $tool_name, version => $tool_version, command => $tool_command };
	}
	use Data::Dumper;
	print(Data::Dumper->Dump([\%tools]));

	return %tools;
}

# Check command {{{1
################################################################

sub check_command (\%) {
	my ($tools) = @_;
}

# Main {{{1
################################################################

read_args();
my %tools = get_tools_info();
# TODO check_command(\%tools); # no __tool_directory__ variable.
# TODO Check phenomenal_tools2container.yaml
# TODO Check job_conf.xml
# TODO Get containers repos and check tool version in README
# TODO Check that container exists
# TODO Check latest container version on Jenkins.
# TODO Check version of tools in workflows.
# TODO Run it automatically on Travis-CI.
# TODO Pay attention to do not publish names in this file.
# TODO Try to publish report on slack, on some channel (public-admin or release_dalcotidine?).
